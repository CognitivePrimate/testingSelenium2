{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 2,
    "pending": 0,
    "failures": 1,
    "start": "2022-02-08T17:43:02.288Z",
    "end": "2022-02-08T17:43:14.286Z",
    "duration": 11998,
    "testsRegistered": 3,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1bcaa099-f3bd-4e4a-ad93-e220dddc38a1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dd347223-3d8a-4f53-b715-0001e3649e2d",
          "title": "add todo tests",
          "fullFile": "/Users/derek.jackson/Code/scrap/seleniumDemo/test/firstTest.js",
          "file": "/test/firstTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds a todo to the application",
              "fullTitle": "add todo tests successfully adds a todo to the application",
              "timedOut": null,
              "duration": 7598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n// navigate to application\nawait driver.get(\"https://lambdatest.github.io/sample-todo-app\");\n// add a todo\nawait driver\n  .findElement(By.id(\"sampletodotext\"))\n  .sendKeys(\"Learn Selenium\", Key.RETURN);\n// assert\n// finds last element in ul of li via its xpath '//li[last()]', grabs value and then returns into todoText variable\n// actual xpath = /html/body/div/div/div/ul/li[INDEX GOES HERE]\nlet todoText = await driver\n  .findElement(By.xpath(\"//li[last()]\"))\n  .getText()\n  .then((value) => {\n    return value;\n  });\n// assert using chai\ntodoText.should.equal(\"Learn Selenium\");\n// close browser ---- COULD ALSO RUN AS 'AFTERALL()' function??\n// await driver.quit();",
              "err": {},
              "uuid": "cf4cba68-4ddd-4e08-82c3-b8cd5b159949",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf4cba68-4ddd-4e08-82c3-b8cd5b159949"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7598,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "2006f674-f71d-45ff-9bc3-54b8ab9ddfdd",
          "title": "add another todo tests",
          "fullFile": "/Users/derek.jackson/Code/scrap/seleniumDemo/test/secondTest.js",
          "file": "/test/secondTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds another todo to the application",
              "fullTitle": "add another todo tests successfully adds another todo to the application",
              "timedOut": null,
              "duration": 7959,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n// navigate to application\nawait driver.get(\"https://lambdatest.github.io/sample-todo-app\");\n// add a todo\nawait driver\n  .findElement(By.id(\"sampletodotext\"))\n  .sendKeys(\"Learn Selenium\", Key.RETURN);\n// assert\n// finds last element in ul of li via its xpath '//li[last()]', grabs value and then returns into todoText variable\n// actual xpath = /html/body/div/div/div/ul/li[INDEX GOES HERE]\nlet todoText = await driver\n  .findElement(By.xpath(\"//li[last()]\"))\n  .getText()\n  .then((value) => {\n    return value;\n  });\n// assert using chai\ntodoText.should.equal(\"Learn Selenium\");\n// close browser ---- COULD ALSO RUN AS 'AFTERALL()' function??\nawait driver.quit();",
              "err": {},
              "uuid": "8d07fb97-f9eb-431f-a746-b9237d20a157",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "successfully adds a THIRD todo to the application",
              "fullTitle": "add another todo tests successfully adds a THIRD todo to the application",
              "timedOut": null,
              "duration": 3478,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n// navigate to application\nawait driver.get(\"https://lambdatest.github.io/sample-todo-app\");\n// add a todo\nawait driver\n  .findElement(By.id(\"sampletodotext\"))\n  .sendKeys(\"Learn Selenium\", Key.RETURN);\n// assert\n// finds last element in ul of li via its xpath '//li[last()]', grabs value and then returns into todoText variable\n// actual xpath = /html/body/div/div/div/ul/li[INDEX GOES HERE]\nlet todoText = await driver\n  .findElement(By.xpath(\"//li[last()]\"))\n  .getText()\n  .then((value) => {\n    return value;\n  });\n// assert using chai\ntodoText.should.equal(\"Learn your job\");\n// close browser ---- COULD ALSO RUN AS 'AFTERALL()' function??\n// await driver.quit();",
              "err": {
                "message": "AssertionError: expected 'Learn Selenium' to equal 'Learn your job'",
                "estack": "AssertionError: expected 'Learn Selenium' to equal 'Learn your job'\n    at Context.<anonymous> (test/secondTest.js:59:21)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- Learn Selenium\n+ Learn your job\n"
              },
              "uuid": "c05740f3-ce40-47b5-be5d-de312c50ae55",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d07fb97-f9eb-431f-a746-b9237d20a157"
          ],
          "failures": [
            "c05740f3-ce40-47b5-be5d-de312c50ae55"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11437,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports",
        "reportFilename": "testResults"
      },
      "version": "6.0.1"
    }
  }
}